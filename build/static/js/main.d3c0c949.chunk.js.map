{"version":3,"sources":["../external \"Cesium\"","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Cesium","Ion","defaultAccessToken","DATA_INDEX","Material","fromType","PolylineGlowType","glowPower","color","Color","TERRAIN_PROVIDER","CesiumTerrainProvider","url","IonResource","fromAssetId","userAgent","navigator","toLowerCase","App","ref","useRef","data","visible","intervalRef","useState","setData","getData","useCallback","fetch","then","resp","json","cartesians","states","map","d","Cartesian3","fromDegrees","useEffect","current","setInterval","clearInterval","useAirTrafficData","React","console","log","cesiumElement","animation","container","style","visibility","timeline","scene","globe","enableLighting","includes","forceResize","position","top","left","right","bottom","baseLayerPicker","requestRenderMode","terrainProvider","uri","minimumPixelSize","maximumPixelSize","latitude","longitude","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qGAAAA,EAAOC,QAAUC,Q,iKCMjBC,MAAIC,mBAAqB,oNAGzB,IACMC,EAIS,EAJTA,EAKQ,EALRA,EAUY,GA2EIC,WAASC,SAASD,WAASE,iBAAkB,CAC/DC,UAAW,GACXC,MAAO,IAAIC,QAAM,EAAK,GAAK,EAAK,KA7CpC,IAgDMC,EAAmB,IAAIC,wBAAsB,CAC/CC,IAAKC,cAAYC,YAAY,KAG3BC,EAAYC,UAAUD,UAAUE,cA4BvBC,MA1Bf,WACI,IAAMC,EAAMC,iBAAO,MACZC,EAjDe,SAACC,GACvB,IAAMC,EAAcH,mBADe,EAEXI,mBAAS,IAFE,mBAE5BH,EAF4B,KAEtBI,EAFsB,KAG7BC,EAAUC,uBAAY,WACxBC,MAtDS,8CAuDJC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAAR,GACE,IAAMW,EAAaX,EAAKY,OAAOC,KAAI,SAACC,GAAD,iBAAOC,aAAWC,YAAX,UACtCF,EAAEhC,UADoC,QACX,EADW,UAEtCgC,EAAEhC,UAFoC,QAEZ,EAFY,UAGtCgC,EAAEhC,UAHoC,QAGR,MAElCsB,EAAQO,QAGrB,CAACX,IAkBJ,OAhBAiB,qBAAU,WAKN,OAJIhB,IACAC,EAAYgB,QAAUC,YAAYd,EA1BzB,MA6BN,WACHe,cAAclB,EAAYgB,YAE/B,CAACjB,EAASI,IAEbY,qBAAU,WACDhB,GACDmB,cAAclB,EAAYgB,WAE/B,CAACjB,IAEG,CAACD,QAgBOqB,EAAkB,GAA1BrB,KAUP,OATAsB,aAAgB,WACZC,QAAQC,IAAI1B,EAAIoB,SAChBpB,EAAIoB,QAAQO,cAAcC,UAAUC,UAAUC,MAAMC,WAAa,SACjE/B,EAAIoB,QAAQO,cAAcK,SAASH,UAAUC,MAAMC,WAAa,SAChE/B,EAAIoB,QAAQO,cAAcM,MAAMC,MAAMC,gBAAkBvC,EAAUwC,SAAS,WAC3EpC,EAAIoB,QAAQO,cAAcU,gBAC3B,IAIC,cAAC,IAAD,CAAQrC,IAAKA,EAAK8B,MAAO,CAACQ,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,GAAIC,iBAAiB,EAChGC,mBAAmB,EACnBC,gBAAiBtD,EAFzB,SAIKW,EAAKa,KAAI,SAAAuB,GAAQ,OACd,cAAC,IAAD,CAAQA,SAAUA,EAAlB,SACI,cAAC,IAAD,CAAeQ,IAAK,eAAgBC,iBAAkB,IAAKC,iBAAkB,OADhDV,EAASW,SAAWX,EAASY,iBChH/DC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3c0c949.chunk.js","sourcesContent":["module.exports = Cesium;","import * as React from 'react';\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {Entity, ModelGraphics, Viewer} from 'resium'\nimport './App.css';\nimport {Cartesian3, CesiumTerrainProvider, Color, Ion, IonResource, Material} from 'cesium'\n\nIon.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJjMjk3OGRkNS0zZTZjLTQyZGYtYjAzNy1lYTk5NmY3NDkyZTMiLCJpZCI6MzMxMzksInNjb3BlcyI6WyJhc3IiLCJnYyJdLCJpYXQiOjE1OTgwNjc1ODh9.KjJzjblyvrJlF0WkZZznyR6FXfNZY432yc19DtT1Ozc'\n\n\nconst DATA_URL = \"https://opensky-network.org/api/states/all\";\nconst DATA_INDEX = {\n    UNIQUE_ID: 0,\n    CALL_SIGN: 1,\n    ORIGIN_COUNTRY: 2,\n    LONGITUDE: 5,\n    LATITUDE: 6,\n    BARO_ALTITUDE: 7,\n    VELOCITY: 9,\n    TRUE_TRACK: 10,\n    VERTICAL_RATE: 11,\n    GEO_ALTITUDE: 13,\n    POSITION_SOURCE: 16,\n};\n\nfunction verticalRateToAngle(object) {\n    // Return: -90 looking up, +90 looking down\n    const verticalRate = object[DATA_INDEX.VERTICAL_RATE] || 0;\n    const velocity = object[DATA_INDEX.VELOCITY] || 0;\n    return (-Math.atan2(verticalRate, velocity) * 180) / Math.PI;\n}\n\nfunction sortResponseData(response, currentData) {\n    if (response && response.states) {\n        // In order to keep the animation smooth we need to always return the same\n        // objects in the exact same order. This function will discard new objects\n        // and only update existing ones.\n        let sortedData = response.states;\n        if (currentData) {\n            const dataAsObj = {};\n            sortedData.forEach(\n                (entry) => (dataAsObj[entry[DATA_INDEX.UNIQUE_ID]] = entry)\n            );\n            sortedData = currentData.map(\n                (entry) => dataAsObj[entry[DATA_INDEX.UNIQUE_ID]] || entry\n            );\n        }\n\n        return sortedData;\n    }\n    return null;\n}\n\nconst REFRESH_TIME = 10 * 1000\n\n/**\n * Data fetching hook which stops the interval\n * if visible is false or if the component unmounts\n * @param visible\n */\nconst useAirTrafficData = (visible) => {\n    const intervalRef = useRef();\n    const [data, setData] = useState([]);\n    const getData = useCallback(() => {\n        fetch(DATA_URL)\n            .then((resp) => resp.json())\n            .then(data => {\n                    const cartesians = data.states.map((d) => Cartesian3.fromDegrees(\n                        d[DATA_INDEX.LONGITUDE] ?? 0,\n                        d[DATA_INDEX.LATITUDE] ?? 0,\n                        d[DATA_INDEX.GEO_ALTITUDE] ?? 0,\n                    ))\n                    setData(cartesians);\n                }\n            )\n    }, [data]);\n\n    useEffect(() => {\n        if (visible) {\n            intervalRef.current = setInterval(getData, REFRESH_TIME);\n        }\n\n        return () => {\n            clearInterval(intervalRef.current);\n        };\n    }, [visible, getData]);\n\n    useEffect(() => {\n        if (!visible) {\n            clearInterval(intervalRef.current);\n        }\n    }, [visible]);\n\n    return {data};\n};\n\nconst GLOW_MATERIAL = Material.fromType(Material.PolylineGlowType, {\n    glowPower: 0.1,\n    color: new Color(1.0, 0.5, 0.0, 1.0)\n});\n\nconst TERRAIN_PROVIDER = new CesiumTerrainProvider({\n    url: IonResource.fromAssetId(1),\n})\n\nconst userAgent = navigator.userAgent.toLowerCase()\n\nfunction App() {\n    const ref = useRef(null);\n    const {data} = useAirTrafficData(true)\n    React.useEffect(() => {\n        console.log(ref.current)\n        ref.current.cesiumElement.animation.container.style.visibility = 'hidden';\n        ref.current.cesiumElement.timeline.container.style.visibility = 'hidden';\n        ref.current.cesiumElement.scene.globe.enableLighting = !userAgent.includes('android');\n        ref.current.cesiumElement.forceResize();\n    }, [])\n\n\n    return (\n        <Viewer ref={ref} style={{position: 'absolute', top: 0, left: 0, right: 0, bottom: 0}} baseLayerPicker={false}\n                requestRenderMode={true}\n                terrainProvider={TERRAIN_PROVIDER}\n        >\n            {data.map(position => (\n                <Entity position={position} key={position.latitude + position.longitude}>\n                    <ModelGraphics uri={\"/banana.gltf\"} minimumPixelSize={200} maximumPixelSize={500}/>\n                </Entity>\n            ))}\n        </Viewer>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}